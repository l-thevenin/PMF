# Script de test local pour √©viter les probl√®mes Docker

Write-Host "üß™ Tests locaux de l'application PMF" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Green

# Configuration
$DIEGO_URL = "http://localhost:3000"
$MIGUEL_URL = "http://localhost:3001"

function Test-Service {
    param(
        [string]$ServiceName,
        [string]$Url,
        [string]$Endpoint = "/health"
    )
    
    try {
        $response = Invoke-RestMethod -Uri "$Url$Endpoint" -Method Get -TimeoutSec 10
        Write-Host "‚úÖ $ServiceName ($Endpoint): OK" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ùå $ServiceName ($Endpoint): $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

function Wait-ForServices {
    Write-Host "‚è≥ Attente que les services soient pr√™ts..." -ForegroundColor Yellow
    
    $maxRetries = 30
    $retryCount = 0
    
    do {
        $diegoOk = Test-Service "Diego" $DIEGO_URL
        $miguelOk = Test-Service "Miguel" $MIGUEL_URL
        
        if ($diegoOk -and $miguelOk) {
            Write-Host "‚úÖ Tous les services sont pr√™ts!" -ForegroundColor Green
            return $true
        }
        
        $retryCount++
        Write-Host "‚è≥ Tentative $retryCount/$maxRetries - Attente de 5 secondes..." -ForegroundColor Yellow
        Start-Sleep -Seconds 5
    } while ($retryCount -lt $maxRetries)
    
    Write-Host "‚ùå Timeout: Les services ne sont pas pr√™ts apr√®s $maxRetries tentatives" -ForegroundColor Red
    return $false
}

# V√©rifier si Docker Compose est en cours d'ex√©cution
Write-Host "üîç V√©rification des services..." -ForegroundColor Cyan

if (-not (Wait-ForServices)) {
    Write-Host ""
    Write-Host "üí° Les services ne sont pas accessibles. Assurez-vous que Docker Compose est en cours d'ex√©cution :" -ForegroundColor Yellow
    Write-Host "   docker-compose up --build" -ForegroundColor White
    Write-Host ""
    exit 1
}

# Tests des endpoints
Write-Host ""
Write-Host "üß™ Tests des endpoints..." -ForegroundColor Cyan
Write-Host "------------------------" -ForegroundColor Cyan

Test-Service "Diego" $DIEGO_URL "/test"
Test-Service "Miguel" $MIGUEL_URL "/test"

# Test d'analyse
Write-Host ""
Write-Host "üìà Test d'analyse de march√©..." -ForegroundColor Cyan
Write-Host "------------------------------" -ForegroundColor Cyan

try {
    $body = @{
        symbol = "BTCUSDT"
        timeframe = "1h"
    } | ConvertTo-Json

    Write-Host "Envoi de la requ√™te d'analyse..."
    $response = Invoke-RestMethod -Uri "$DIEGO_URL/analyze" -Method Post -Body $body -ContentType "application/json" -TimeoutSec 30
    
    Write-Host "‚úÖ Analyse r√©ussie!" -ForegroundColor Green
    Write-Host "üìä R√©sultat:" -ForegroundColor Cyan
    Write-Host ($response | ConvertTo-Json -Depth 3)
    
    if ($response.id) {
        Write-Host ""
        Write-Host "üéØ Strat√©gie cr√©√©e avec l'ID: $($response.id)" -ForegroundColor Green
        Write-Host "   (Miguel devrait automatiquement recevoir cette strat√©gie)" -ForegroundColor Yellow
    }
    
} catch {
    Write-Host "‚ùå Test d'analyse √©chou√©: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "üí° V√©rifiez les logs avec: docker-compose logs diego" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéâ Tests termin√©s!" -ForegroundColor Green
Write-Host ""
Write-Host "üí° Pour voir les logs en temps r√©el:" -ForegroundColor Yellow
Write-Host "   docker-compose logs -f" -ForegroundColor White
Write-Host ""
Write-Host "üí° Pour arr√™ter l'application:" -ForegroundColor Yellow
Write-Host "   docker-compose down" -ForegroundColor White
