# Script de test PowerShell pour l'application PMF

Write-Host "üöÄ Test de l'application PMF Trading Bot" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green

# Configuration
$DIEGO_URL = "http://localhost:3000"
$MIGUEL_URL = "http://localhost:3001"

# Fonction pour faire une pause
function Pause {
    Write-Host "Appuyez sur Entr√©e pour continuer..." -ForegroundColor Yellow
    Read-Host
}

# Test 1: Health checks
Write-Host ""
Write-Host "üìä Test 1: V√©rification de l'√©tat des services" -ForegroundColor Cyan
Write-Host "----------------------------------------------" -ForegroundColor Cyan

Write-Host "Test Diego..."
try {
    $response = Invoke-RestMethod -Uri "$DIEGO_URL/health" -Method Get
    Write-Host "‚úÖ Diego: $($response | ConvertTo-Json)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Diego non accessible: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "Test Miguel..."
try {
    $response = Invoke-RestMethod -Uri "$MIGUEL_URL/health" -Method Get
    Write-Host "‚úÖ Miguel: $($response | ConvertTo-Json)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Miguel non accessible: $($_.Exception.Message)" -ForegroundColor Red
}

Pause

# Test 2: Endpoints de test
Write-Host ""
Write-Host "üîß Test 2: Endpoints de test" -ForegroundColor Cyan
Write-Host "----------------------------" -ForegroundColor Cyan

Write-Host "Test Diego /test..."
try {
    $response = Invoke-RestMethod -Uri "$DIEGO_URL/test" -Method Get
    Write-Host "‚úÖ Diego test: $($response | ConvertTo-Json)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Endpoint test Diego √©chou√©: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "Test Miguel /test..."
try {
    $response = Invoke-RestMethod -Uri "$MIGUEL_URL/test" -Method Get
    Write-Host "‚úÖ Miguel test: $($response | ConvertTo-Json)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Endpoint test Miguel √©chou√©: $($_.Exception.Message)" -ForegroundColor Red
}

Pause

# Test 3: Analyse de march√©
Write-Host ""
Write-Host "üìà Test 3: Analyse de march√©" -ForegroundColor Cyan
Write-Host "----------------------------" -ForegroundColor Cyan

Write-Host "Lancement de l'analyse BTCUSDT..."
try {
    $body = @{
        symbol = "BTCUSDT"
        timeframe = "1h"
    } | ConvertTo-Json

    $response = Invoke-RestMethod -Uri "$DIEGO_URL/analyze" -Method Post -Body $body -ContentType "application/json"
    Write-Host "‚úÖ Analyse r√©ussie:" -ForegroundColor Green
    Write-Host ($response | ConvertTo-Json -Depth 3)
    
    $strategyId = $response.id
    Write-Host "‚úÖ Strat√©gie cr√©√©e avec l'ID: $strategyId" -ForegroundColor Green
    
    Pause
    
    # Test 4: Information sur l'ex√©cution automatique
    Write-Host ""
    Write-Host "üéØ Test 4: Ex√©cution automatique" -ForegroundColor Cyan
    Write-Host "--------------------------------" -ForegroundColor Cyan
    Write-Host "La strat√©gie devrait √™tre automatiquement envoy√©e √† Miguel." -ForegroundColor Yellow
    Write-Host "V√©rifiez les logs de Miguel pour voir si l'ex√©cution a eu lieu." -ForegroundColor Yellow
    
    Pause
    
    # Test 5: Test manuel d'ex√©cution
    Write-Host ""
    Write-Host "üöÄ Test 5: Test manuel d'ex√©cution" -ForegroundColor Cyan
    Write-Host "-----------------------------------" -ForegroundColor Cyan
    
    if ($strategyId) {
        Write-Host "Ex√©cution manuelle de la strat√©gie $strategyId..."
        try {
            $execBody = @{
                strategyId = $strategyId
            } | ConvertTo-Json
            
            $execResponse = Invoke-RestMethod -Uri "$MIGUEL_URL/execute-strategy" -Method Post -Body $execBody -ContentType "application/json"
            Write-Host "‚úÖ Ex√©cution manuelle r√©ussie:" -ForegroundColor Green
            Write-Host ($execResponse | ConvertTo-Json -Depth 3)
        } catch {
            Write-Host "‚ùå Ex√©cution manuelle √©chou√©e: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
} catch {
    Write-Host "‚ùå Analyse √©chou√©e: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "üéâ Tests termin√©s!" -ForegroundColor Green
Write-Host "==================" -ForegroundColor Green
Write-Host ""
Write-Host "üí° Conseils:" -ForegroundColor Yellow
Write-Host "- V√©rifiez les logs avec: docker-compose logs -f" -ForegroundColor White
Write-Host "- Pour arr√™ter: docker-compose down" -ForegroundColor White
Write-Host "- Pour red√©marrer: docker-compose up --build" -ForegroundColor White

Pause
